// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Together.Activity.Infrastructure.Data;

namespace Together.Activity.Infrastructure.Migrations
{
    [DbContext(typeof(ActivityDbContext))]
    [Migration("20180503085844_AddActivityAddress")]
    partial class AddActivityAddress
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-preview2-30571")
                .HasAnnotation("Relational:Sequence:.activityseq", "'activityseq', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Together.Activity.Domain.AggregatesModel.ActivityAggregate.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "activityseq")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime>("ActivitDate");

                    b.Property<int>("ActivityStatusId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Description");

                    b.Property<string>("Details");

                    b.Property<DateTime>("EndRegisterDate");

                    b.Property<DateTime>("EndTime");

                    b.Property<decimal?>("Funds");

                    b.Property<int?>("LimitsNum");

                    b.Property<string>("OwnerId")
                        .HasMaxLength(200);

                    b.Property<DateTime>("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("ActivityStatusId");

                    b.ToTable("activities");
                });

            modelBuilder.Entity("Together.Activity.Domain.AggregatesModel.ActivityAggregate.ActivityStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("activitystatus");
                });

            modelBuilder.Entity("Together.Activity.Domain.AggregatesModel.ActivityAggregate.Participant", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(200);

                    b.Property<int>("ActivityId");

                    b.Property<string>("Avatar")
                        .HasMaxLength(200);

                    b.Property<DateTime>("JoinTime");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Sex")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("UserId", "ActivityId");

                    b.HasIndex("ActivityId");

                    b.ToTable("participant");
                });

            modelBuilder.Entity("Together.Activity.Domain.AggregatesModel.ActivityAggregate.Activity", b =>
                {
                    b.HasOne("Together.Activity.Domain.AggregatesModel.ActivityAggregate.ActivityStatus", "ActivityStatus")
                        .WithMany()
                        .HasForeignKey("ActivityStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Together.Activity.Domain.AggregatesModel.ActivityAggregate.Address", "Address", b1 =>
                        {
                            b1.Property<int?>("ActivityId");

                            b1.Property<string>("City");

                            b1.Property<string>("Country");

                            b1.Property<string>("County");

                            b1.Property<string>("DetailAddress");

                            b1.Property<string>("Location");

                            b1.Property<string>("Province");

                            b1.ToTable("activities");

                            b1.HasOne("Together.Activity.Domain.AggregatesModel.ActivityAggregate.Activity")
                                .WithOne("Address")
                                .HasForeignKey("Together.Activity.Domain.AggregatesModel.ActivityAggregate.Address", "ActivityId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Together.Activity.Domain.AggregatesModel.ActivityAggregate.Participant", b =>
                {
                    b.HasOne("Together.Activity.Domain.AggregatesModel.ActivityAggregate.Activity")
                        .WithMany("Participants")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
